function [image1 opticalFlowScore] = Lumigraph_vector_occ(lightfield,zNearFar,focus_LF,focus,deltaU,novel_depth,depths)

tic;
image1 = zeros(480,640,3);
%assuming h_uv and h_st are normalized to 1 in this implementation
s = 6.5; %desired view
t = 6.5;
u = 1:480;
v = 1:640;
u_floor1 = zeros(480,640);
u_ceil1  = zeros(480,640);
v_floor1 = zeros(480,640);
v_ceil1  = zeros(480,640);
u_floor2 = zeros(480,640);
u_ceil2  = zeros(480,640);
v_floor2 = zeros(480,640);
v_ceil2  = zeros(480,640);
novel_depth(novel_depth==0) = .00001;
su_ratio = deltaU/(focus_LF/focus);
depth_adj = (focus_LF-novel_depth)./novel_depth*su_ratio;
threshold  = .05*abs(zNearFar(2) - zNearFar(1));
t01 = toc;
for i = 1:480
    u_floor1(i,:) = u(i) - (s-floor(s))*depth_adj(i,:);
    u_floor2(i,:) = u(i) + (s-floor(s))*depth_adj(i,:);
    u_ceil1(i,:)  = u(i) - (s- ceil(s))*depth_adj(i,:);
    u_ceil2(i,:)  = u(i) + (s- ceil(s))*depth_adj(i,:);
end
t02 = toc;
for j = 1:640
    v_floor1(:,j) = v(j) - (s-floor(s))*depth_adj(:,j);
    v_floor2(:,j) = v(j) + (s-floor(s))*depth_adj(:,j);
    v_ceil1(:,j)  = v(j) - (s- ceil(s))*depth_adj(:,j);
    v_ceil2(:,j)  = v(j) + (s- ceil(s))*depth_adj(:,j);
end
t3 = toc;
mp1 = (u_floor1 < 1) | (u_floor1 > 480) | (v_floor1 < 1) | (v_floor1 > 640);
mp2 = (u_floor2 < 1) | (u_floor2 > 480) | (v_ceil2  < 1) | (v_ceil2  > 640);
mp3 = (u_ceil2  < 1) | (u_ceil2  > 480) | (v_floor2 < 1) | (v_floor2 > 640);
mp4 = (u_ceil1  < 1) | (u_ceil1  > 480) | (v_ceil1  < 1) | (v_ceil1  > 640);
mp1 = mp1(:);
mp2 = mp2(:);
mp3 = mp3(:);
mp4 = mp4(:);
u_floor1 = max(1, min(480, u_floor1));
u_ceil1  = max(1, min(480, u_ceil1 ));
v_floor1 = max(1, min(640, v_floor1));
v_ceil1  = max(1, min(640, v_ceil1 ));
u_floor2 = max(1, min(480, u_floor2));
u_ceil2  = max(1, min(480, u_ceil2 ));
v_floor2 = max(1, min(640, v_floor2));
v_ceil2  = max(1, min(640, v_ceil2 ));
t4 = toc;
u_floor1(novel_depth>=zNearFar(2)-.01) = 1;
u_floor2(novel_depth>=zNearFar(2)-.01) = 1;
v_floor1(novel_depth>=zNearFar(2)-.01) = 1;
v_floor2(novel_depth>=zNearFar(2)-.01) = 1;
u_ceil1( novel_depth>=zNearFar(2)-.01) = 1;
u_ceil2( novel_depth>=zNearFar(2)-.01) = 1;
v_ceil1( novel_depth>=zNearFar(2)-.01) = 1;
v_ceil2( novel_depth>=zNearFar(2)-.01) = 1;
t5 = toc;
w1  = (1-abs(floor(u_floor1) - u_floor1)).*(1-abs(floor(v_floor1) - v_floor1));
w2  = (1-abs(floor(u_floor1) - u_floor1)).*(1-abs(ceil(v_floor1)  - v_floor1));
w3  = (1-abs(ceil(u_floor1)  - u_floor1)).*(1-abs(floor(v_floor1) - v_floor1));
w4  = (1-abs(ceil(u_floor1)  - u_floor1)).*(1-abs(ceil(v_floor1)  - v_floor1));
w5  = (1-abs(floor(u_floor2) - u_floor2)).*(1-abs(floor(v_ceil2 ) - v_ceil2 ));
w6  = (1-abs(floor(u_floor2) - u_floor2)).*(1-abs(ceil(v_ceil2 )  - v_ceil2 ));
w7  = (1-abs(ceil(u_floor2)  - u_floor2)).*(1-abs(floor(v_ceil2 ) - v_ceil2 ));
w8  = (1-abs(ceil(u_floor2)  - u_floor2)).*(1-abs(ceil(v_ceil2 )  - v_ceil2 ));
w9  = (1-abs(floor(u_ceil2 ) - u_ceil2 )).*(1-abs(floor(v_floor2) - v_floor2));
w10 = (1-abs(floor(u_ceil2 ) - u_ceil2 )).*(1-abs(ceil(v_floor2)  - v_floor2));
w11 = (1-abs(ceil(u_ceil2 )  - u_ceil2 )).*(1-abs(floor(v_floor2) - v_floor2));
w12 = (1-abs(ceil(u_ceil2 )  - u_ceil2 )).*(1-abs(ceil(v_floor2)  - v_floor2));
w13 = (1-abs(floor(u_ceil1 ) - u_ceil1 )).*(1-abs(floor(v_ceil1 ) - v_ceil1 ));
w14 = (1-abs(floor(u_ceil1 ) - u_ceil1 )).*(1-abs(ceil(v_ceil1 )  - v_ceil1 ));
w15 = (1-abs(ceil(u_ceil1 )  - u_ceil1 )).*(1-abs(floor(v_ceil1 ) - v_ceil1 ));
w16 = (1-abs(ceil(u_ceil1 )  - u_ceil1 )).*(1-abs(ceil(v_ceil1 )  - v_ceil1 ));
t6 = toc;
w1  = w1(:);
w2  = w2(:);
w3  = w3(:);
w4  = w4(:);
w5  = w5(:);
w6  = w6(:);
w7  = w7(:);
w8  = w8(:);
w9  = w9(:);
w10 = w10(:);
w11 = w11(:);
w12 = w12(:);
w13 = w13(:);
w14 = w14(:);
w15 = w15(:);
w16 = w16(:);
t7 = toc;
s1 = floor(s);
s2 =  ceil(s);
t1 = floor(t);
t2 =  ceil(t);
w_1 = (1-abs(s - floor(s)))*(1-abs(t - floor(t)));
w_2 = (1-abs(s - floor(s)))*(1-abs(t -  ceil(t)));
w_3 = (1-abs(s -  ceil(s)))*(1-abs(t - floor(t)));
w_4 = (1-abs(s -  ceil(s)))*(1-abs(t -  ceil(t)));
t8 = toc;
ind1  = s1 + 9*(t1-1) + 9*9*(floor(u_floor1)-1) + 9*9*480*(floor(v_floor1)-1);
ind2  = s1 + 9*(t1-1) + 9*9*(floor(u_floor1)-1) +  9*9*480*(ceil(v_floor1)-1);
ind3  = s1 + 9*(t1-1) +  9*9*(ceil(u_floor1)-1) + 9*9*480*(floor(v_floor1)-1);
ind4  = s1 + 9*(t1-1) +  9*9*(ceil(u_floor1)-1) +  9*9*480*(ceil(v_floor1)-1);
ind5  = s1 + 9*(t2-1) + 9*9*(floor(u_floor2)-1) + 9*9*480*(floor(v_ceil2 )-1);
ind6  = s1 + 9*(t2-1) + 9*9*(floor(u_floor2)-1) +  9*9*480*(ceil(v_ceil2 )-1);
ind7  = s1 + 9*(t2-1) +  9*9*(ceil(u_floor2)-1) + 9*9*480*(floor(v_ceil2 )-1);
ind8  = s1 + 9*(t2-1) +  9*9*(ceil(u_floor2)-1) +  9*9*480*(ceil(v_ceil2 )-1);
ind9  = s2 + 9*(t1-1) + 9*9*(floor(u_ceil2 )-1) + 9*9*480*(floor(v_floor2)-1);
ind10 = s2 + 9*(t1-1) + 9*9*(floor(u_ceil2 )-1) +  9*9*480*(ceil(v_floor2)-1);
ind11 = s2 + 9*(t1-1) +  9*9*(ceil(u_ceil2 )-1) + 9*9*480*(floor(v_floor2)-1);
ind12 = s2 + 9*(t1-1) +  9*9*(ceil(u_ceil2 )-1) +  9*9*480*(ceil(v_floor2)-1);
ind13 = s2 + 9*(t2-1) + 9*9*(floor(u_ceil1 )-1) + 9*9*480*(floor(v_ceil1 )-1);
ind14 = s2 + 9*(t2-1) + 9*9*(floor(u_ceil1 )-1) +  9*9*480*(ceil(v_ceil1 )-1);
ind15 = s2 + 9*(t2-1) +  9*9*(ceil(u_ceil1 )-1) + 9*9*480*(floor(v_ceil1 )-1);
ind16 = s2 + 9*(t2-1) +  9*9*(ceil(u_ceil1 )-1) +  9*9*480*(ceil(v_ceil1 )-1);
t9 = toc;
ind1  = ind1(:);
ind2  = ind2(:);
ind3  = ind3(:);
ind4  = ind4(:);
ind5  = ind5(:);
ind6  = ind6(:);
ind7  = ind7(:);
ind8  = ind8(:);
ind9  = ind9(:);
ind10 = ind10(:);
ind11 = ind11(:);
ind12 = ind12(:);
ind13 = ind13(:);
ind14 = ind14(:);
ind15 = ind15(:);
ind16 = ind16(:);
t10 = toc;
%extra code to grab for optical flow comparisons
v1 = zeros(480,640,3);
v2 = zeros(480,640,3);
v3 = zeros(480,640,3);
v4 = zeros(480,640,3);
%end extra code
%extra code to catch occlusions
m1  = abs(depths(ind1) -novel_depth(:))<threshold;
m2  = abs(depths(ind2) -novel_depth(:))<threshold;
m3  = abs(depths(ind3) -novel_depth(:))<threshold;
m4  = abs(depths(ind4) -novel_depth(:))<threshold;
m5  = abs(depths(ind5) -novel_depth(:))<threshold;
m6  = abs(depths(ind6) -novel_depth(:))<threshold;
m7  = abs(depths(ind7) -novel_depth(:))<threshold;
m8  = abs(depths(ind8) -novel_depth(:))<threshold;
m9  = abs(depths(ind9) -novel_depth(:))<threshold;
m10 = abs(depths(ind10)-novel_depth(:))<threshold;
m11 = abs(depths(ind11)-novel_depth(:))<threshold;
m12 = abs(depths(ind12)-novel_depth(:))<threshold;
m13 = abs(depths(ind13)-novel_depth(:))<threshold;
m14 = abs(depths(ind14)-novel_depth(:))<threshold;
m15 = abs(depths(ind15)-novel_depth(:))<threshold;
m16 = abs(depths(ind16)-novel_depth(:))<threshold;
m_1 = m1 & m2 & m3 & m4 & ~mp1;
m_2 = m5 & m6 & m7 & m8 & ~mp2;
m_3 = m9 & m10 & m11 & m12 & ~mp3;
m_4 = m13 & m14 & m15 & m16 & ~mp4;
m_fin = 4./(m_1 + m_2 + m_3 + m_4);
mask_occ = zeros(480,640);
mask_occ(isinf(m_fin)) = 1;
m_fin(~isfinite(m_fin)) = 0;
for rgb = 1:3
    rgb_lin_ind = (rgb-1)*9*9*480*640;
    temp1 = zeros(480*640,1);
    temp2 = zeros(480*640,1);
    temp1 = temp1 + w1 .*lightfield(ind1 + rgb_lin_ind).*m1;
    temp1 = temp1 + w2 .*lightfield(ind2 + rgb_lin_ind).*m2;
    temp1 = temp1 + w3 .*lightfield(ind3 + rgb_lin_ind).*m3;
    temp1 = temp1 + w4 .*lightfield(ind4 + rgb_lin_ind).*m4;
    temp2 = temp2 + w_1.*temp1.*m_1;
    v1(:,:,rgb) = vec2mat(temp1,480)';
    temp1 = zeros(480*640,1);
    temp1 = temp1 + w5 .*lightfield(ind5 + rgb_lin_ind).*m5;
    temp1 = temp1 + w6 .*lightfield(ind6 + rgb_lin_ind).*m6;
    temp1 = temp1 + w7 .*lightfield(ind7 + rgb_lin_ind).*m7;
    temp1 = temp1 + w8 .*lightfield(ind8 + rgb_lin_ind).*m8;
    temp2 = temp2 + w_2.*temp1.*m_2;
    v2(:,:,rgb) = vec2mat(temp1,480)';
    temp1 = zeros(480*640,1);
    temp1 = temp1 + w9 .*lightfield(ind9 + rgb_lin_ind).*m9;
    temp1 = temp1 + w10.*lightfield(ind10 + rgb_lin_ind).*m10;
    temp1 = temp1 + w11.*lightfield(ind11 + rgb_lin_ind).*m11;
    temp1 = temp1 + w12.*lightfield(ind12 + rgb_lin_ind).*m12;
    temp2 = temp2 + w_3.*temp1.*m_3;
    v3(:,:,rgb) = vec2mat(temp1,480)';
    temp1 = zeros(480*640,1);
    temp1 = temp1 + w13.*lightfield(ind13 + rgb_lin_ind).*m13;
    temp1 = temp1 + w14.*lightfield(ind14 + rgb_lin_ind).*m14;
    temp1 = temp1 + w15.*lightfield(ind15 + rgb_lin_ind).*m15;
    temp1 = temp1 + w16.*lightfield(ind16 + rgb_lin_ind).*m16;
    temp2 = temp2 + w_4.*temp1.*m_4;
    temp2 = temp2.*m_fin;
    v4(:,:,rgb) = vec2mat(temp1,480)';
    image1(:,:,rgb) = vec2mat(temp2,480)';
end
t11 = toc;
disp(['Lum vec occ: ' num2str(t11)]);
%image1 = patchOcclusions(image1, novel_depth, mask_occ);
m_flow = m_1 & m_2 & m_3 & m_4;
m_flow = vec2mat(m_flow, 480)';
m_flow = m_flow;
m_flow = cat(3, m_flow, m_flow, m_flow);
opticalFlowScore = calculateFlowScore(v1.*m_flow,v2.*m_flow,v3.*m_flow,v4.*m_flow);
%opticalFlowScore = 0;
% figure;
% plot([t01 t02 t3 t4 t5 t6 t7 t8 t9 t10 t11]);
    
